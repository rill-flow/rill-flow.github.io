"use strict";(self.webpackChunkrill_flow_github_io=self.webpackChunkrill_flow_github_io||[]).push([[5115],{5741:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>c});var o=n(5893),s=n(1151);const i={},r="Organize Long Tasks",a={id:"best-practice/invoke-long-running-jobs",title:"Organize Long Tasks",description:"We define tasks with a time limit of more than 10 s as \u201clong tasks\u201d, where the results of the mission cannot be obtained immediately, and we need to wait for the end of the mandate before proceeding to the next node.",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/best-practice/02-invoke-long-running-jobs.md",sourceDirName:"best-practice",slug:"/best-practice/invoke-long-running-jobs",permalink:"/en/docs/best-practice/invoke-long-running-jobs",draft:!1,unlisted:!1,editUrl:"https://crowdin.com/project/rill-flow/en",tags:[],version:"current",sidebarPosition:2,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Custom Executor",permalink:"/en/docs/best-practice/customize-executor"},next:{title:"Server Access Service",permalink:"/en/docs/best-practice/work-with-servless"}},l={},c=[{value:"Receive call - waiting for long tasks",id:"receive-call---waiting-for-long-tasks",level:2},{value:"Call the cloud service\uff1adispatcher to create an asynchronous thread pool",id:"call-the-cloud-servicedispatcher-to-create-an-asynchronous-thread-pool",level:3},{value:"Adds an executor Agent with\uff1a",id:"adds-an-executor-agent-with",level:3},{value:"For call-poll long tasks",id:"for-call-poll-long-tasks",level:2},{value:"For call-back long tasks",id:"for-call-back-long-tasks",level:2},{value:"For stream long tasks",id:"for-stream-long-tasks",level:2}];function d(e){const t={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",ul:"ul",...(0,s.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h1,{id:"organize-long-tasks",children:"Organize Long Tasks"}),"\n",(0,o.jsx)(t.p,{children:"We define tasks with a time limit of more than 10 s as \u201clong tasks\u201d, where the results of the mission cannot be obtained immediately, and we need to wait for the end of the mandate before proceeding to the next node."}),"\n",(0,o.jsx)(t.p,{children:"Rill Flow is designed to keep the process context stored and therefore does not lose the context of the process execution even if it is restarted or upgraded in the long task."}),"\n",(0,o.jsx)(t.p,{children:"We divide our common long tasks into four categories, and Bill Flow can be interfaced with these types of long tasks in different ways."}),"\n",(0,o.jsxs)(t.blockquote,{children:["\n",(0,o.jsx)(t.p,{children:"In practice, it is not recommended that the Rill Flow arrangement be used for tasks that have been carried out for more than one month (of course, it can be organized)."}),"\n"]}),"\n",(0,o.jsx)(t.h2,{id:"receive-call---waiting-for-long-tasks",children:"Receive call - waiting for long tasks"}),"\n",(0,o.jsx)(t.p,{children:"Once a mission is launched, it will be necessary to synchronize and wait for the interface to return. Depending on the mode of deployment of the corresponding service, there can be two interfaces with\uff1a"}),"\n",(0,o.jsx)(t.h3,{id:"call-the-cloud-servicedispatcher-to-create-an-asynchronous-thread-pool",children:"Call the cloud service\uff1adispatcher to create an asynchronous thread pool"}),"\n",(0,o.jsxs)(t.p,{children:["When the corresponding execution service is deployed on the public website, it can be done by adding asynchronous execution thread pools to the dispatcher, avoiding sending threads to be packed for long periods of time by long assignments. Please refer to the ",(0,o.jsx)(t.code,{children:"ChatGPT"})," plugin in the code."]}),"\n",(0,o.jsxs)(t.blockquote,{children:["\n",(0,o.jsx)(t.p,{children:"When the Rill Flow service itself restarts, the corresponding request will also be lost. Elegant shutdown related logic will need to be added to the dispatcher"}),"\n"]}),"\n",(0,o.jsx)(t.h3,{id:"adds-an-executor-agent-with",children:"Adds an executor Agent with\uff1a"}),"\n",(0,o.jsx)(t.p,{children:"When the corresponding executor is self-serving, it is recommended that an additional call be made to the service by Sidecar, with a request from Agent to maintain the service as well as the actual service and that the agency return Rill Flow at the end of the request to notify the task execution."}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.img,{alt:"executor agent",src:n(1118).Z+"",width:"543",height:"132"})}),"\n",(0,o.jsx)(t.p,{children:"By adding Agent, it is effective to avoid failure of long connection requests due to network or other problems."}),"\n",(0,o.jsx)(t.h2,{id:"for-call-poll-long-tasks",children:"For call-poll long tasks"}),"\n",(0,o.jsx)(t.p,{children:"Get token, after launching the task, and then get progress through the Task Query Interface."}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:"Add two nodes to the process"}),"\n",(0,o.jsx)(t.li,{children:"Passing token between tasks through the parameter mapper"}),"\n"]}),"\n",(0,o.jsx)(t.h2,{id:"for-call-back-long-tasks",children:"For call-back long tasks"}),"\n",(0,o.jsx)(t.p,{children:"Assign callback when launching the task and call the specified interface when the task is complete."}),"\n",(0,o.jsx)(t.p,{children:"Return the Rill Flow to complete the interface directly in the task, or the business implements the callback logic by converting the original task request to encapsulate and then calling to Rill Flow."}),"\n",(0,o.jsx)(t.h2,{id:"for-stream-long-tasks",children:"For stream long tasks"}),"\n",(0,o.jsx)(t.p,{children:"Once a mission is launched, it will be possible to write data continuously to a certain inflows."}),"\n",(0,o.jsx)(t.p,{children:"Rill Flow currently does not support original streaming task configuration, and needs to encapsulate flow logic to Executor itself."})]})}function h(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},1118:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/executor-agent-d81ee43b6e5574be4d1b4184fd317e13.svg"},1151:(e,t,n)=>{n.d(t,{Z:()=>a,a:()=>r});var o=n(7294);const s={},i=o.createContext(s);function r(e){const t=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),o.createElement(i.Provider,{value:t},e.children)}}}]);