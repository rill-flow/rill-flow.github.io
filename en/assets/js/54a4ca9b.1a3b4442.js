"use strict";(self.webpackChunkrill_flow_github_io=self.webpackChunkrill_flow_github_io||[]).push([[5810],{4312:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>c,toc:()=>a});var n=r(5893),s=r(1151);const i={sidebar_position:3},o="Executor",c={id:"user-guide/defination/executor",title:"Executor",description:"Overview",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/user-guide/03-defination/03-executor.md",sourceDirName:"user-guide/03-defination",slug:"/user-guide/defination/executor",permalink:"/en/docs/user-guide/defination/executor",draft:!1,unlisted:!1,editUrl:"https://crowdin.com/project/rill-flow/en",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Tasks and Dispatchers",permalink:"/en/docs/user-guide/defination/task-and-dispatcher"},next:{title:"Context and Parameter Mapping",permalink:"/en/docs/user-guide/defination/context-and-mapping"}},d={},a=[{value:"Overview",id:"overview",level:2},{value:"Executor Address",id:"executor-address",level:2},{value:"Executor input and output",id:"executor-input-and-output",level:2},{value:"Input",id:"input",level:3},{value:"Output",id:"output",level:3},{value:"Executor execution method",id:"executor-execution-method",level:2},{value:"Task Attributes",id:"task-attributes",level:3},{value:"Synchronize",id:"synchronize",level:3},{value:"Asynchronous",id:"asynchronous",level:3},{value:"Supported Executors",id:"supported-executors",level:2}];function l(e){const t={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"executor",children:"Executor"}),"\n",(0,n.jsx)(t.h2,{id:"overview",children:"Overview"}),"\n",(0,n.jsxs)(t.p,{children:["Rill Flow employs the concept of executors to decouple task flow orchestration from the execution nodes. Each ",(0,n.jsx)(t.code,{children:"task"})," node is bound to dispatchers and executors through the ",(0,n.jsx)(t.code,{children:"resourceName"})," attribute. The dispatcher is responsible for delegating the actual execution process to the executor.Each ",(0,n.jsx)(t.code,{children:"task"})," node is bound to the dispatcher and the executor via the ",(0,n.jsx)(t.code,{children:"resourceName"})," attribute.The issuer is responsible for entrusting the specific execution of the task to the executor."]}),"\n",(0,n.jsx)(t.h2,{id:"executor-address",children:"Executor Address"}),"\n",(0,n.jsxs)(t.p,{children:["The sender will parse the executor address through ",(0,n.jsx)(t.code,{children:"resourceName"}),". Rill Flow assigns the task to the executor via the executor address. The executor is responsible for the specific task.Normally, the executor ",(0,n.jsx)(t.code,{children:"resourceName"})," that provides the HTTP interface is the executor address."]}),"\n",(0,n.jsx)(t.p,{children:"Example Python executor:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["When the executor is deployed using [docker-compose](../../getting-started/02-sample.md#parallel and asynchronous) the executor's ",(0,n.jsx)(t.code,{children:"resourceName"})," and the executor addresses are\uff1a","\n",(0,n.jsxs)(t.blockquote,{children:["\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.a,{href:"http://sample-executor:8000/executor.json",children:"http://sample-executor:8000/executor.json"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(t.h2,{id:"executor-input-and-output",children:"Executor input and output"}),"\n",(0,n.jsx)(t.h3,{id:"input",children:"Input"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Key"}),(0,n.jsx)(t.th,{children:"Value Type"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"query_params_*"}),(0,n.jsx)(t.td,{children:"map"}),(0,n.jsxs)(t.td,{children:["GET request parameters, keys with ",(0,n.jsx)(t.code,{children:"query_params_"})," prefix should be of map type, appended to the URL as key=value"]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"request_header_*"}),(0,n.jsx)(t.td,{children:"map"}),(0,n.jsxs)(t.td,{children:["Request headers, keys with ",(0,n.jsx)(t.code,{children:"request_header_"})," prefix should be of map type, included in the request headers"]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"Other keys"}),(0,n.jsx)(t.td,{children:"string"}),(0,n.jsx)(t.td,{children:"POST request body parameters, currently only supports json type, other key/values will be included in the json structure of the post body"})]})]})]}),"\n",(0,n.jsxs)(t.p,{children:["Before calling the executor, the dispatcher of Rill Flow will prepare the call argument of the executor as defined in ",(0,n.jsx)(t.a,{href:"/docs/user-guide/defination/context-and-mapping#parameter-mapping",children:"inputMappings"})," attribute.Enter the parameter to map the function in ",(0,n.jsx)(t.code,{children:"context"}),"."]}),"\n",(0,n.jsx)(t.h3,{id:"output",children:"Output"}),"\n",(0,n.jsxs)(t.p,{children:["After execution by executor, output is json type (currently only json type is supported), Rill Flow is mapped through ",(0,n.jsx)(t.a,{href:"/docs/user-guide/defination/context-and-mapping#parameter-mapping",children:"outputMappings"})," attribute rules that map the executor results back to the context of the workflow for subsequent tasks."]}),"\n",(0,n.jsxs)(t.blockquote,{children:["\n",(0,n.jsxs)(t.p,{children:["For more information about context and mapping rules, see ",(0,n.jsx)(t.a,{href:"context-and-mapping",children:"Context and Mapping"}),"."]}),"\n"]}),"\n",(0,n.jsx)(t.h2,{id:"executor-execution-method",children:"Executor execution method"}),"\n",(0,n.jsx)(t.h3,{id:"task-attributes",children:"Task Attributes"}),"\n",(0,n.jsx)(t.p,{children:"Executor execution method can be specified by task attribute."}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Parameter"}),(0,n.jsx)(t.th,{children:"Value"}),(0,n.jsx)(t.th,{children:"Description"})]})}),(0,n.jsx)(t.tbody,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:"Pattern"}),(0,n.jsx)(t.td,{children:"task_sync/task_async"}),(0,n.jsxs)(t.td,{children:["Specifies the task execution mode, synchronous (",(0,n.jsx)(t.code,{children:"task_sync"}),") or asynchronous (",(0,n.jsx)(t.code,{children:"task_async"}),")"]})]})})]}),"\n",(0,n.jsx)(t.h3,{id:"synchronize",children:"Synchronize"}),"\n",(0,n.jsx)(t.p,{children:"For tasks that take time in milliseconds."}),"\n",(0,n.jsx)(t.h3,{id:"asynchronous",children:"Asynchronous"}),"\n",(0,n.jsxs)(t.p,{children:["For heavy computing tasks such as large models.When ",(0,n.jsx)(t.code,{children:"X-Mode"})," and ",(0,n.jsx)(t.code,{children:"X-Callback-Url"})," are present in the header and ",(0,n.jsx)(t.code,{children:"X-Mode=async"}),", the executor will enable async",(0,n.jsx)(t.code,{children:"by default until the task is completed by calling"}),"X-Callback-Url` to notify Rill Flow\nthat the task is complete."]}),"\n",(0,n.jsx)(t.h2,{id:"supported-executors",children:"Supported Executors"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"https://github.com/weibocom/rill-flow/tree/main/executors/fastapi/README.md",children:"python"})}),"\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"https://github.com/weibocom/rill-flow/tree/main/executors/spring-boot/README.md",children:"java"})}),"\n"]})]})}function u(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},1151:(e,t,r)=>{r.d(t,{Z:()=>c,a:()=>o});var n=r(7294);const s={},i=n.createContext(s);function o(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);