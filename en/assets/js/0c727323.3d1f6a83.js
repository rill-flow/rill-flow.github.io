"use strict";(self.webpackChunkrill_flow_github_io=self.webpackChunkrill_flow_github_io||[]).push([[497],{5573:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>l,toc:()=>o});var n=s(5893),r=s(1151);const i={},a="Server Access Service",l={id:"best-practice/work-with-servless",title:"Server Access Service",description:"Serverless enables operations to be spent on demand and billed on a case-by-case basis, while the self-deployed, lightly quantified features of functions require many \u201cglue codes\u201d when actual operations get down.",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/best-practice/03-work-with-servless.md",sourceDirName:"best-practice",slug:"/best-practice/work-with-servless",permalink:"/en/docs/best-practice/work-with-servless",draft:!1,unlisted:!1,editUrl:"https://crowdin.com/project/rill-flow/en",tags:[],version:"current",sidebarPosition:3,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Organize Long Tasks",permalink:"/en/docs/best-practice/invoke-long-running-jobs"},next:{title:"Angular model",permalink:"/en/docs/best-practice/work-with-llms"}},c={},o=[{value:"Flow Control",id:"flow-control",level:2},{value:"Server Gateway",id:"server-gateway",level:2},{value:"OpenFaas",id:"openfaas",level:3},{value:"Business integration and asynchronous calls",id:"business-integration-and-asynchronous-calls",level:2},{value:"Business Integration",id:"business-integration",level:3},{value:"Asynchronous task callback address",id:"asynchronous-task-callback-address",level:3},{value:"Use callback as task parameter",id:"use-callback-as-task-parameter",level:3}];function d(e){const t={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"server-access-service",children:"Server Access Service"}),"\n",(0,n.jsx)(t.p,{children:"Serverless enables operations to be spent on demand and billed on a case-by-case basis, while the self-deployed, lightly quantified features of functions require many \u201cglue codes\u201d when actual operations get down."}),"\n",(0,n.jsx)(t.p,{children:'Rill Flow supports common process control statements and can serve as "glue codes" for low coding Serverlessness.'}),"\n",(0,n.jsx)(t.h2,{id:"flow-control",children:"Flow Control"}),"\n",(0,n.jsxs)(t.p,{children:["Process control nodes that support conditions, loops, jumps, etc. in Rill Flows. Use process control nodes to implement basic business control album and expression and reference",(0,n.jsx)(t.a,{href:"/en/docs/user-guide/defination/control",children:"\u6d41\u7a0b\u63a7\u5236"})]}),"\n",(0,n.jsx)(t.h2,{id:"server-gateway",children:"Server Gateway"}),"\n",(0,n.jsx)(t.p,{children:"Rill Flow organizes cloud services, including cloud functions, in the form of workflow to support process control nodes of conditionality, loop and jumps.Tasks are forwarded via HTTP request to a Serverless Gateway, implementing Serverless Business Integration.For further information, reference may be made to the [HTTP dispatcher](../user-guide/03-defination/02-task-and-dispatcher.md#http-protocol dispatcher)."}),"\n",(0,n.jsxs)(t.blockquote,{children:["\n",(0,n.jsxs)(t.p,{children:["You can also implement the ",(0,n.jsx)(t.code,{children:"Serverless"})," special dispatcher by developing custom plugin details for",(0,n.jsx)(t.a,{href:"/en/docs/develop/plugin/create-plugin",children:"\u521b\u5efa\u63d2\u4ef6"})]}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:'Consider text-generated videos, where text acquisition, text split, text-color, text-pairing, text-matching, calibration and calibration services are a separate function. Rill Flow can organize functions into line with project needs and reduce developers to write unnecessary "glue codes".Product demand iterations can be quickly developed by modifying the DAG graphs based on different needs over time.'}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"image",src:s(4804).Z+"",width:"1093",height:"281"})}),"\n",(0,n.jsx)(t.h3,{id:"openfaas",children:"OpenFaas"}),"\n",(0,n.jsxs)(t.p,{children:["OpenFaas gateway's ",(0,n.jsx)(t.code,{children:"namespace"}),", ",(0,n.jsx)(t.code,{children:"service"})," and ",(0,n.jsx)(t.code,{children:"port"})," can be confirmed by deploying Yaml to ",(0,n.jsx)(t.a,{href:"https://docs.openfaas.com/employment/kubernetes/",children:"OpenFaas"}),". When defining a task, the task can be bound to a different ",(0,n.jsx)(t.code,{children:"Serverless"})," function via the ",(0,n.jsx)(t.code,{children:"ResourceName"})," field."]}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsxs)(t.p,{children:["The OpenFaas function synchronizes calls to ",(0,n.jsx)(t.code,{children:"ResourceName"})," like\uff1a"]}),"\n",(0,n.jsxs)(t.blockquote,{children:["\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.code,{children:"http://{service}.{namespace}.svc.cluster.local:{service-port}/function/{function-name}/{function-uri}"})}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"images",src:s(6634).Z+"",width:"583",height:"134"})}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsxs)(t.p,{children:["The OpenFaas function asynchronously calls ",(0,n.jsx)(t.code,{children:"ResourceName"})," like\uff1a"]}),"\n",(0,n.jsxs)(t.blockquote,{children:["\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.code,{children:"http://{service}.{namespace}.svc.cluster.local:{service-port}/async-function/{function-name}/{function-uri}"})}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.img,{alt:"images",src:s(8113).Z+"",width:"723",height:"400"}),")"]}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(t.h2,{id:"business-integration-and-asynchronous-calls",children:"Business integration and asynchronous calls"}),"\n",(0,n.jsx)(t.h3,{id:"business-integration",children:"Business Integration"}),"\n",(0,n.jsxs)(t.p,{children:["For the integration of normal business, simply create tasks by using the business call interface as a resourceName of task. If the business is not called in the way of http:/fit, the corresponding resourceProtocolProtocol can be supported by creating a custom distributor plugin, reference to ",(0,n.jsx)(t.a,{href:"/en/docs/develop/plugin/intro",children:"\u5f00\u53d1\u63d2\u4ef6"})]}),"\n",(0,n.jsxs)(t.p,{children:["When the business function takes longer to execute it, you can set the task's pattern field to ",(0,n.jsx)(t.code,{children:"task_async"})," to indicate that this is an asynchronous call. Rill Flow will return immediately after calling a function and will not wait for the function to be executed."]}),"\n",(0,n.jsx)(t.h3,{id:"asynchronous-task-callback-address",children:"Asynchronous task callback address"}),"\n",(0,n.jsxs)(t.p,{children:["For asynchronous calls, Rill Flow will add the ",(0,n.jsx)(t.code,{children:"X-Callback-Url"})," field to the header that is the callback address after the current task's execution. The function needs to be executed by sending a request to that address to notify Rill Flow that the task's execution has been completed.Refer to ",(0,n.jsx)(t.a,{href:"/en/docs/user-guide/defination/task-and-dispatcher#%E5%BC%82%E6%AD%A5%E6%A8%A1%E5%BC%8Ftask_async",children:"\u5f02\u6b65\u6a21\u5f0f"}),", specific callback address\uff1a"]}),"\n",(0,n.jsxs)(t.blockquote,{children:["\n",(0,n.jsx)(t.p,{children:"http://{rill-flow-server-host}/flow/trigger.json"}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"This callback interface supports both GET and POST calls."}),"\n",(0,n.jsx)(t.p,{children:"The url query request parameter for the interface follows\uff1a"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{style:{textAlign:"center"}}),(0,n.jsx)(t.th,{style:{textAlign:"center"},children:"Required"}),(0,n.jsx)(t.th,{style:{textAlign:"center"},children:"Type"}),(0,n.jsx)(t.th,{style:{textAlign:"center"},children:"Description"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"execution_id"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"true"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"string"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Execute id"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"task_name"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"true"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"string"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Task name"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Status"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"false"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"string"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Task running, value\uff1asuccesses, failed, default to success"})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"Context"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"false"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"string"}),(0,n.jsx)(t.td,{style:{textAlign:"center"},children:"JSON format task execution result"})]})]})]}),"\n",(0,n.jsx)(t.p,{children:"If called via POST, the JSON format task return parameter can be passed through body parameters, used to process the return parameter through outputMappings, such as in the context etc. Therefore, for POST calls, the Content-Type field in the header must be valued as application/json."}),"\n",(0,n.jsx)(t.p,{children:"Rill Flow will merge both the query and the POST body arguments of the context if they are passed simultaneously, and the same key key will override body arguments in the same query argument."}),"\n",(0,n.jsx)(t.h3,{id:"use-callback-as-task-parameter",children:"Use callback as task parameter"}),"\n",(0,n.jsx)(t.p,{children:"To use the above callback interface and the parameter for a task as the incoming parameter for a task node, add the corresponding map\uff1a to the inputMappings of the corresponding task node"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-yaml",children:"inputMappings:\n    - target: $input.data.rigger_url\n      source: $tasks.tasks.task1.trgger_url\n"})}),"\n",(0,n.jsx)(t.p,{children:'In the execution of this workflow, Rill Flow will pass the callback address called task1 to the task as an input["data"]\\["trigger_url"] when the task is configured.'}),"\n",(0,n.jsx)(t.p,{children:"The default value for this parameter is\uff1a"}),"\n",(0,n.jsxs)(t.blockquote,{children:["\n",(0,n.jsx)(t.p,{children:"http://{rill-flow-server-host}/flow/trigger.json?execution_id={current-execution-id}&task_name=task1"}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"\u5982\u679c\u4f60\u9700\u8981\u5728\u8be5\u4efb\u52a1\u63a5\u6536\u5230\u7684 trigger_url \u4e2d\u989d\u5916\u6dfb\u52a0\u67d0\u4e9b\u53c2\u6570\uff0c\u53ef\u4ee5\u901a\u8fc7\u5728 trigger_url \u540e\u9762\u6dfb\u52a0 ? \u6765\u5c06\u53c2\u6570\u4ee5 key1=value1&key2=value2 \u7684\u65b9\u5f0f\u6dfb\u52a0\u5230 trigger_url \u4e2d\uff1a"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-yaml",children:"inputMappings:\n    - target: $.input.data.trigger_url\n      source: $.tasks.task1.trigger_url?context=%7B%22key%22%3A%20%22value%22%7D\n"})}),"\n",(0,n.jsx)(t.p,{children:"Then, the final generated trigger_url will become\uff1a"}),"\n",(0,n.jsxs)(t.blockquote,{children:["\n",(0,n.jsx)(t.p,{children:"http://{rill-flow-server-host}/flow/trigger.json?execution_id={current-execution-id}&task_name=task1&context=%7B%22key%22%3A%20%22value%22%7D"}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},8113:(e,t,s)=>{s.d(t,{Z:()=>n});const n=s.p+"assets/images/openfaas-async-1b1bc8454d946223d6df00f05b34fa40.svg"},6634:(e,t,s)=>{s.d(t,{Z:()=>n});const n=s.p+"assets/images/openfaas-sync-d503c98d05024e66497f02ca1aee1331.svg"},4804:(e,t,s)=>{s.d(t,{Z:()=>n});const n=s.p+"assets/images/text_to_video-fdb00f95f54ec8503e9fddf156e273f3.svg"},1151:(e,t,s)=>{s.d(t,{Z:()=>l,a:()=>a});var n=s(7294);const r={},i=n.createContext(r);function a(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);