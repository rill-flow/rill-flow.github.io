"use strict";(self.webpackChunkrill_flow_github_io=self.webpackChunkrill_flow_github_io||[]).push([[5444],{4614:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>s,metadata:()=>o,toc:()=>l});var t=i(5893),a=i(1151);const s={sidebar_position:1},r="Workflow",o={id:"user-guide/defination/flow",title:"Workflow",description:"Directed Acyclic Graph (DAG)",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/user-guide/03-defination/01-flow.md",sourceDirName:"user-guide/03-defination",slug:"/user-guide/defination/flow",permalink:"/en/docs/user-guide/defination/flow",draft:!1,unlisted:!1,editUrl:"https://crowdin.com/project/rill-flow/en",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"\u6d41\u7a0b\u5b9a\u4e49",permalink:"/en/docs/category/\u6d41\u7a0b\u5b9a\u4e49"},next:{title:"Tasks and Dispatchers",permalink:"/en/docs/user-guide/defination/task-and-dispatcher"}},c={},l=[{value:"Directed Acyclic Graph (DAG)",id:"directed-acyclic-graph-dag",level:2},{value:"Describing the Workflow",id:"describing-the-workflow",level:2},{value:"Submitting Workflow Definition",id:"submitting-workflow-definition",level:2},{value:"API",id:"api",level:3},{value:"Management UI",id:"management-ui",level:3},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,a.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"workflow",children:"Workflow"}),"\n",(0,t.jsx)(n.h2,{id:"directed-acyclic-graph-dag",children:"Directed Acyclic Graph (DAG)"}),"\n",(0,t.jsx)(n.p,{children:"Rill Flow is a set of process orchestration services based on DAG's topological sorting characteristics, automatically scheduling and executing tasks based on their dependencies."}),"\n",(0,t.jsx)(n.p,{children:"Directed Acyclic Graph (DAG): In graph theory, a directed graph that cannot return to itsstarting point through several edges is a directed acyclic graph. From a computer perspective, DAG is a data structure used to describe a set of directed tasks with dependencies, where the direction indicates the execution order."}),"\n",(0,t.jsx)(n.p,{children:"The following diagram depicts a DAG-based workflow:"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"DAG",src:i(179).Z+"",width:"932",height:"444"})}),"\n",(0,t.jsx)(n.p,{children:"(Figure 1: Example of a DAG-based process)"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Task A: Independent, can be executed immediately."}),"\n",(0,t.jsx)(n.li,{children:"Task B and Task F: Depend on Task A and can be executed in parallel after A is completed."}),"\n",(0,t.jsx)(n.li,{children:"\u4efb\u52a1C\uff1a\u4f9d\u8d56\u4e8e\u4efb\u52a1B\u3002"}),"\n",(0,t.jsx)(n.li,{children:"Task D and Task E: Depend on Task C and can be executed in parallel after C is completed."}),"\n",(0,t.jsx)(n.li,{children:"\u4efb\u52a1G\uff1a\u4f9d\u8d56\u4e8e\u4efb\u52a1F\u3002"}),"\n",(0,t.jsx)(n.li,{children:"Task H: Depends on Tasks E and G and is executed after both are completed."}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"describing-the-workflow",children:"Describing the Workflow"}),"\n",(0,t.jsx)(n.p,{children:"Rill Flow uses the YAML language to describe DAG diagrams and orchestrate processes. YAML is chosen because it is a human-readable data serialization language, designed to conveniently represent various data structures. For Rill Flow users, this means they can quickly orchestrate business processes through YAML files, even in the absence of a front-end interface. YAML is compatible with features of programming languages like Perl, C, XML, HTML, and works with most current programming languages.The reason for choosing Yaml as a process description language is that Yaml is a human readable data serialization language designed to facilitate the representation of various data structures.For Rill Flows, we hope that users can quickly organize business processes through Yaml files even without front-end displays.At the same time, Yaml is compatible with the features of various programming languages such as Perl, C, XML, HTML, etc. and can be used in most of the current programming languages."}),"\n",(0,t.jsxs)(n.p,{children:["YAML files use the .yml or .yaml extension and follow specific ",(0,t.jsx)(n.a,{href:"https://yaml.org/",children:"grammar rules"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"The following is a simple YAML description of the DAG (Figure 1):"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"type: flow\ndagName: sample_dag\ntasks:\n  - name: A\n    next: B,F\n    category: function\n  - name: B\n    next: C\n    category: function\n  - name: C\n    next: D,E\n    category: function\n  - name: D\n    category: return\n  - name: E\n    next: H\n    category: function\n  - name: F\n    next: G\n    category: function\n  - name: G\n    next: F\n    category: function\n  - name: H\n    category: return\n"})}),"\n",(0,t.jsx)(n.h2,{id:"submitting-workflow-definition",children:"Submitting Workflow Definition"}),"\n",(0,t.jsx)(n.h3,{id:"api",children:"API"}),"\n",(0,t.jsxs)(n.p,{children:["Refer to ",(0,t.jsx)(n.a,{href:"/en/docs/user-guide/api#%E5%88%9B%E5%BB%BA%E5%B7%A5%E4%BD%9C%E6%B5%81",children:"/flow/bg/manage/descriptor"})]}),"\n",(0,t.jsx)(n.h3,{id:"management-ui",children:(0,t.jsx)(n.a,{href:"/en/docs/user-guide/background/definition/definition-graph",children:"Management UI"})}),"\n",(0,t.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,t.jsx)(n.p,{children:"After completing the workflow definition, the workflow can be executed, creating a new instance for each execution. Rill Flow allocates necessary resources for each instance.Rill Flow will allocate the necessary running resources for each instance."}),"\n",(0,t.jsx)(n.p,{children:"In a distributed deployment environment, each step of the workflow instance may run on different nodes. Upon completion, the system recycles the resources.When workflow cases are implemented, the related resources will be recovered."}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["More information on workflow implementation can be found in ",(0,t.jsx)(n.a,{href:"/en/docs/user-guide/execution/execute",children:"Submitting Workflows"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"You can also learn about:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/en/docs/user-guide/defination/task-and-dispatcher",children:"Task and Dispatcher Definitions"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"/en/docs/user-guide/defination/context-and-mapping",children:"Context and Parameter Mapping"})}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},179:(e,n,i)=>{i.d(n,{Z:()=>t});const t=i.p+"assets/images/dag_flow-d6671f87ad1341e21e33fd0c2749687b.png"},1151:(e,n,i)=>{i.d(n,{Z:()=>o,a:()=>r});var t=i(7294);const a={},s=t.createContext(a);function r(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);