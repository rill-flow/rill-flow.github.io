"use strict";(self.webpackChunkrill_flow_github_io=self.webpackChunkrill_flow_github_io||[]).push([[1266],{7901:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>a,contentTitle:()=>i,default:()=>h,frontMatter:()=>c,metadata:()=>s,toc:()=>l});var n=o(5893),r=o(1151);const c={},i="Custom Executor",s={id:"best-practice/customize-executor",title:"Custom Executor",description:"Overview",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/best-practice/01-customize-executor.md",sourceDirName:"best-practice",slug:"/best-practice/customize-executor",permalink:"/en/docs/best-practice/customize-executor",draft:!1,unlisted:!1,editUrl:"https://crowdin.com/project/rill-flow/en",tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"\u6700\u4f73\u5b9e\u8df5",permalink:"/en/docs/category/\u6700\u4f73\u5b9e\u8df5"},next:{title:"Organize Long Tasks",permalink:"/en/docs/best-practice/invoke-long-running-jobs"}},a={},l=[{value:"Overview",id:"overview",level:2},{value:"Executor and ResourceName",id:"executor-and-resourcename",level:3},{value:"Microservice Executor",id:"microservice-executor",level:3},{value:"&quot;Almighty Executor&quot;",id:"almighty-executor",level:3}];function d(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",img:"img",p:"p",pre:"pre",...(0,r.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"custom-executor",children:"Custom Executor"}),"\n",(0,n.jsx)(t.h2,{id:"overview",children:"Overview"}),"\n",(0,n.jsx)(t.p,{children:"Most of the Rill Flow operations are encapsulated in the executor and, in practice, we will use python, java, or go to implement the executor http-interface protocol based on the actual execution function to be performed, receive and process tasks (also other distribution agreements can be extended by dispatcher extensions)."}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"invoke executor",src:o(7905).Z+"",width:"443",height:"137"})}),"\n",(0,n.jsx)(t.h3,{id:"executor-and-resourcename",children:"Executor and ResourceName"}),"\n",(0,n.jsxs)(t.p,{children:["When defining a task, the task can be bound to different dispatches and executors by the ",(0,n.jsx)(t.code,{children:"ResourceName"})," field. A typical ",(0,n.jsx)(t.code,{children:"ResourceName"})," is similar to\uff1a"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-ignorelang",children:"http://sample-service/do_soming\n"})}),"\n",(0,n.jsxs)(t.p,{children:["ResourceName's design draws on URI's design specifications. In the example above, ",(0,n.jsx)(t.code,{children:"http"})," agrees on the name of the dispatcher, ",(0,n.jsx)(t.code,{children:"sample-service"})," corresponds to the unit deployed, ",(0,n.jsx)(t.code,{children:"do_somethin"})," corresponds to the specific function and calls the relevant parameters to be passed by ",(0,n.jsx)(t.code,{children:"body"}),"."]}),"\n",(0,n.jsxs)(t.p,{children:["If you have implemented your own dispatcher, such as issuing RPC requests based on the motan framework, then ",(0,n.jsx)(t.code,{children:"ResourceName"})," may become\uff1a"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-ignorelang",children:"motan://group_name/service_name\n"})}),"\n",(0,n.jsxs)(t.p,{children:["In practice, ",(0,n.jsx)(t.code,{children:"ResourceName"})," can also be fully equated with the ",(0,n.jsx)(t.code,{children:"HTTP"})," agreement, and ",(0,n.jsx)(t.code,{children:"Executor"})," can be developed and deployed as a ",(0,n.jsx)(t.code,{children:"HTTP"})," server."]}),"\n",(0,n.jsx)(t.h3,{id:"microservice-executor",children:"Microservice Executor"}),"\n",(0,n.jsx)(t.p,{children:"In the design of the Rill Flow, the executor is designed, as far as possible, as a common component coupled with the Rill Flow's programming component, which interacts only through the dispatch and callback protocol.Instead of directly introducing the Almighty Executive, we have only agreed on a sender-executor agreement."}),"\n",(0,n.jsx)(t.p,{children:"In practice, different tasks may involve different languages, frameworks and implementation environments, and we hope that, by introducing generic implementer agreements (rather than executors), the business community will focus more on the operational logic of using appropriate technical stacks, splitting different types of tasks to different implementers and service deployment and discovery through K8S, Service Mesh or Serverless technologies, thereby reducing the complexity growth and flexibility constraints associated with the \u201cmonograph executor\u201d."}),"\n",(0,n.jsx)(t.h3,{id:"almighty-executor",children:'"Almighty Executor"'}),"\n",(0,n.jsxs)(t.p,{children:["If the business scenario is more homogeneous (or favouring monolithic services), all logic can also be packed into an executor, when the overall architecture of Rill Flow is similar to the ",(0,n.jsx)(t.code,{children:"master-worker"})," model, and tasks can be programmed to allow the same executor to perform different logic by changing the parameters in ",(0,n.jsx)(t.code,{children:"ResourceName"})," or ",(0,n.jsx)(t.code,{children:"parameters"}),"."]})]})}function h(e={}){const{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},7905:(e,t,o)=>{o.d(t,{Z:()=>n});const n=o.p+"assets/images/invoke-executor-ad144c355285aecc545f9311e23fd61b.svg"},1151:(e,t,o)=>{o.d(t,{Z:()=>s,a:()=>i});var n=o(7294);const r={},c=n.createContext(r);function i(e){const t=n.useContext(c);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),n.createElement(c.Provider,{value:t},e.children)}}}]);