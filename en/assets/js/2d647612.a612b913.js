"use strict";(self.webpackChunkrill_flow_github_io=self.webpackChunkrill_flow_github_io||[]).push([[7501],{562:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>a,contentTitle:()=>o,default:()=>d,frontMatter:()=>n,metadata:()=>c,toc:()=>l});var s=t(5893),i=t(1151);const n={sidebar_position:1},o="Architecture Introduction",c={id:"user-guide/arch",title:"Architecture Introduction",description:"System Architecture Diagram",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/user-guide/01-arch.md",sourceDirName:"user-guide",slug:"/user-guide/arch",permalink:"/en/docs/user-guide/arch",draft:!1,unlisted:!1,editUrl:"https://crowdin.com/project/rill-flow/en",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"\u7528\u6237\u6307\u5357",permalink:"/en/docs/category/\u7528\u6237\u6307\u5357"},next:{title:"Deployment Instructions",permalink:"/en/docs/user-guide/deploy"}},a={},l=[{value:"System Architecture Diagram",id:"system-architecture-diagram",level:2},{value:"Architecture Explanation",id:"architecture-explanation",level:2},{value:"Core Modules",id:"core-modules",level:2}];function u(e){const r={h1:"h1",h2:"h2",img:"img",li:"li",p:"p",strong:"strong",ul:"ul",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.h1,{id:"architecture-introduction",children:"Architecture Introduction"}),"\n",(0,s.jsx)(r.h2,{id:"system-architecture-diagram",children:"System Architecture Diagram"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.img,{alt:"Architecture",src:t(6655).Z+"",width:"901",height:"301"})}),"\n",(0,s.jsx)(r.h2,{id:"architecture-explanation",children:"Architecture Explanation"}),"\n",(0,s.jsx)(r.p,{children:"Rill Flow is a process orchestration and task execution framework based on Directed Acyclic Graph (DAG), primarily consisting of three functional modules: Process Trigger, Process Orchestration, and Task Execution."}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Process Trigger"}),": Rill Flow supports various triggering methods, including scheduled task triggers, message event triggers, and API interface triggers. Users can choose the appropriate trigger method according to their specific needs.Users can select appropriate triggers based on actual needs."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Process Orchestration"}),": Rill Flow offers two types of process diagram orchestration methods: visualization and YAML editing. These allow users to easily define and manage business processes."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Task Execution"}),": Rill Flow supports scheduling of multiple task executors, including HTTP, Serverless Function, GPT interface, custom extension executors, and remote executors, enabling users to customize task executors based on their needs.Users can customize task executors based on actual needs."]}),"\n"]}),"\n",(0,s.jsx)(r.h2,{id:"core-modules",children:"Core Modules"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"DagParser"}),": The DAG Parser is responsible for parsing user-defined DAG diagrams and generating executable task flows."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"DagTraversal"}),": The DAG Traversal module is tasked with traversing the DAG diagram to select the currently executable task nodes."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"TaskDispatcher"}),": The Task Dispatcher schedules the executable task nodes to the matching task executors for execution."]}),"\n"]})]})}function d(e={}){const{wrapper:r}={...(0,i.a)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},6655:(e,r,t)=>{t.d(r,{Z:()=>s});const s=t.p+"assets/images/flow_arch-abc957a5102626a91192ecb7b3560f5e.svg"},1151:(e,r,t)=>{t.d(r,{Z:()=>c,a:()=>o});var s=t(7294);const i={},n=s.createContext(i);function o(e){const r=s.useContext(n);return s.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function c(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(n.Provider,{value:r},e.children)}}}]);