"use strict";(self.webpackChunkrill_flow_github_io=self.webpackChunkrill_flow_github_io||[]).push([[9452],{7720:(e,i,r)=>{r.r(i),r.d(i,{assets:()=>a,contentTitle:()=>s,default:()=>u,frontMatter:()=>n,metadata:()=>c,toc:()=>l});var t=r(5893),o=r(1151);const n={sidebar_position:4},s="Overload Protection",c={id:"user-guide/execution/overflow",title:"Overload Protection",description:"Storage Capacity Protection",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/user-guide/04-execution/04-overflow.md",sourceDirName:"user-guide/04-execution",slug:"/user-guide/execution/overflow",permalink:"/en/docs/user-guide/execution/overflow",draft:!1,unlisted:!1,editUrl:"https://crowdin.com/project/rill-flow/en",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Execution Status",permalink:"/en/docs/user-guide/execution/status"},next:{title:"\u76d1\u63a7",permalink:"/en/docs/category/\u76d1\u63a7"}},a={},l=[{value:"Storage Capacity Protection",id:"storage-capacity-protection",level:2},{value:"Circuit Breaker",id:"circuit-breaker",level:2},{value:"Rate Limiting",id:"rate-limiting",level:2},{value:"Four Modes of Rate Limiting Strategies",id:"four-modes-of-rate-limiting-strategies",level:3},{value:"Rate Limiting Configuration Structure",id:"rate-limiting-configuration-structure",level:3},{value:"Configuration Methods",id:"configuration-methods",level:3},{value:"1) Via Parameter Passing",id:"1-via-parameter-passing",level:4},{value:"2. Through Properties Configuration",id:"2-through-properties-configuration",level:4},{value:"3. Rill Flow Default Configuration",id:"3-rill-flow-default-configuration",level:4}];function d(e){const i={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",...(0,o.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.h1,{id:"overload-protection",children:"Overload Protection"}),"\n",(0,t.jsx)(i.h2,{id:"storage-capacity-protection",children:"Storage Capacity Protection"}),"\n",(0,t.jsx)(i.p,{children:"Rill Flow checks the storage capacity when submitting the execution process.When submitting execution processes, Rill Flow checks for storage capacity. If the storage exceeds the set limit, Rill Flow will reject the submission and return error code 100 with the message:"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-txt",children:"dag runtime storage usage limit\n"})}),"\n",(0,t.jsxs)(i.p,{children:["The maximum threshold for storage capacity can be configured in the ",(0,t.jsx)(i.code,{children:"application.properties"})," file with the following property:"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-properties",children:"weibo.flow.runtime.redis.default.storage.max.usage=90\n"})}),"\n",(0,t.jsx)(i.p,{children:"The range for this setting is between 0 to 100, with the default being 90, indicating the maximum permitted percentage of used Redis capacity. Setting it to 0 or 100 means no storage capacity check will be performed.Set to 0 or 100 to exclude storage capacity checks."}),"\n",(0,t.jsx)(i.h2,{id:"circuit-breaker",children:"Circuit Breaker"}),"\n",(0,t.jsx)(i.p,{children:"When Rill Flow calls an executor to perform tasks, the executor can return circuit breaking information to prevent repeated retries from overloading resources."}),"\n",(0,t.jsx)(i.p,{children:"If the executor needs to circuit break a resource after dispatching a task, it can return the following error message:"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-json",children:'{\n  "error_detail": {\n    "retry_interval_seconds": 10\n  }\n}\n'})}),"\n",(0,t.jsxs)(i.p,{children:["Here, ",(0,t.jsx)(i.code,{children:"retry_interval_seconds"})," is the duration (in seconds) of the circuit break. If set to 0, no circuit break will occur."]}),"\n",(0,t.jsx)(i.p,{children:"Upon receiving this circuit break information from the executor, Rill Flow will temporarily stop calling the same resourceName for the specified duration."}),"\n",(0,t.jsx)(i.h2,{id:"rate-limiting",children:"Rate Limiting"}),"\n",(0,t.jsx)(i.p,{children:"Rill Flow supports the refusal of execution process submissions under resource circuit breaking conditions, thus enabling traffic control and protection of overloaded resources."}),"\n",(0,t.jsx)(i.h3,{id:"four-modes-of-rate-limiting-strategies",children:"Four Modes of Rate Limiting Strategies"}),"\n",(0,t.jsx)(i.p,{children:"Rill Flow supports four modes of rate limiting strategies:"}),"\n",(0,t.jsxs)(i.ol,{children:["\n",(0,t.jsx)(i.li,{children:"Short Board Mode (short_board): Triggers rate limiting for the execution process if any of the dependent resources are circuit-broken. This is the default strategy in Rill Flow.Circuit Breaking"}),"\n",(0,t.jsx)(i.li,{children:"Long Board Mode (long_board): Rate limiting occurs only if all the resources depended on by the execution process are circuit-broken."}),"\n",(0,t.jsxs)(i.li,{children:["Key Resource Mode (key_resource): Rate limiting is triggered only when all specified key resources are circuit-broken. Additional configuration of ",(0,t.jsx)(i.code,{children:"key_resources"})," is required to specify these key resources.Additional configuration of ",(0,t.jsx)(i.code,{children:"key_resources"})," is required to specify key resources."]}),"\n",(0,t.jsx)(i.li,{children:"Skip Mode (skip): No rate limiting is performed."}),"\n"]}),"\n",(0,t.jsx)(i.h3,{id:"rate-limiting-configuration-structure",children:"Rate Limiting Configuration Structure"}),"\n",(0,t.jsxs)(i.p,{children:["Rill Flow supports custom rate limiting strategies through configuration or parameter passing. The rate limiting configuration uses a json structure, as shown in the example below",":Limit"," flow configuration is in json format, below\uff1a"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-json",children:'{\n    "check_type": "key_resource",\n    "key_resources": [\n        "http://127.0.0.1:8080/sample/start.json",\n        "http://127.0.0.1:8080/sample/end.json"\n    ]\n}\n'})}),"\n",(0,t.jsxs)(i.p,{children:["In this example, the ",(0,t.jsx)(i.code,{children:"check_type"})," specifies the rate limiting strategy as Key Resource Mode (key_resource), and ",(0,t.jsx)(i.code,{children:"key_resources"})," defines what the key resources are."]}),"\n",(0,t.jsx)(i.h3,{id:"configuration-methods",children:"Configuration Methods"}),"\n",(0,t.jsx)(i.p,{children:"Rill Flow supports the following three methods for configuring rate limiting strategies, listed in order of decreasing priority:"}),"\n",(0,t.jsxs)(i.ol,{children:["\n",(0,t.jsx)(i.li,{children:"Parameters passed during the creation of the execution process;"}),"\n",(0,t.jsxs)(i.li,{children:["Configuration through the ",(0,t.jsx)(i.code,{children:"properties"})," file;"]}),"\n",(0,t.jsx)(i.li,{children:"Rill Flow's default configuration."}),"\n"]}),"\n",(0,t.jsx)(i.h4,{id:"1-via-parameter-passing",children:"1) Via Parameter Passing"}),"\n",(0,t.jsxs)(i.p,{children:["Passing through parameters allows flexibility to set limits for each task execution.Rate limiting strategies for each execution task can be flexibly set by passing the rate limiting configuration as a json string in the ",(0,t.jsx)(i.code,{children:"resource_check"})," parameter (which needs to be UrlEncoded). For example",":e",".g.\uff1a"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-sh",children:"curl -XPOST 'http://127.0.0.1:8080/flow/submit.json?descriptor_id=demoFlowTest:demoTest&resource_check=%7B%22check_type%22%3A%22long_board%22%7D'\n    -H'Content-Type:application/json'\n    -d '{\"left\":5,\"right\":5}'\n"})}),"\n",(0,t.jsxs)(i.p,{children:["In this example, the value of the ",(0,t.jsx)(i.code,{children:"resource_check"})," parameter ",(0,t.jsx)(i.code,{children:"%7B%22check_type%22%3A%22long_board%22%7D"})," is the UrlEncoded result of ",(0,t.jsx)(i.code,{children:'{"check_type":"long_board"}'}),", indicating the use of the long board mode for rate limiting."]}),"\n",(0,t.jsx)(i.h4,{id:"2-through-properties-configuration",children:"2. Through Properties Configuration"}),"\n",(0,t.jsxs)(i.p,{children:["Rate limiting strategies can be set via the java properties file (in the ",(0,t.jsx)(i.code,{children:"application.properties"})," file of the project), allowing different strategies for different workflow business IDs (businessId). For example",":e",".g.\uff1a"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-properties",children:"weibo.flow.runtime.resource.check.id.to.config={'demoFlowTest':'{\"check_type\":\"long_board\"}'}\n"})}),"\n",(0,t.jsx)(i.p,{children:"This configuration is a map structure, where the key is the workflow business ID and the value is a String type json configuration of the rate limiting structure."}),"\n",(0,t.jsx)(i.h4,{id:"3-rill-flow-default-configuration",children:"3. Rill Flow Default Configuration"}),"\n",(0,t.jsxs)(i.p,{children:["If neither the ",(0,t.jsx)(i.code,{children:"resource_check"})," parameter is passed nor a properties configuration for the specific workflow business ID is set, Rill Flow will use the default configuration, which is the short board mode (short_board)."]})]})}function u(e={}){const{wrapper:i}={...(0,o.a)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},1151:(e,i,r)=>{r.d(i,{Z:()=>c,a:()=>s});var t=r(7294);const o={},n=t.createContext(o);function s(e){const i=t.useContext(n);return t.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function c(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),t.createElement(n.Provider,{value:i},e.children)}}}]);