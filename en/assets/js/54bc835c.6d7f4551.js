"use strict";(self.webpackChunkrill_flow_github_io=self.webpackChunkrill_flow_github_io||[]).push([[4047],{6586:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>d,frontMatter:()=>s,metadata:()=>a,toc:()=>c});var i=n(5893),o=n(1151);const s={sidebar_position:3},r="Extended Points",a={id:"develop/plugin/extension",title:"Extended Points",description:"DispatcherExtension is the plugin extension interface, which inherits PF4J's ExtensionPoint interface\uff1a",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/develop/01-plugin/03-extension.md",sourceDirName:"develop/01-plugin",slug:"/develop/plugin/extension",permalink:"/en/docs/develop/plugin/extension",draft:!1,unlisted:!1,editUrl:"https://crowdin.com/project/rill-flow/en",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Create Plugin",permalink:"/en/docs/develop/plugin/create-plugin"},next:{title:"\u5f00\u53d1Rill Flow",permalink:"/en/docs/category/\u5f00\u53d1rill-flow"}},l={},c=[{value:"getName()",id:"getname",level:4},{value:"handle()",id:"handle",level:4},{value:"getIcon()",id:"geticon",level:4},{value:"getSchema()",id:"getschema",level:4}];function h(e){const t={a:"a",code:"code",h1:"h1",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"extended-points",children:"Extended Points"}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"DispatcherExtension"})," is the plugin extension interface, which inherits PF4J's ExtensionPoint interface\uff1a"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-java",children:"public interface DispatcherExtension extends ExtensionPoint {\n    String handle(Resource resource, DispatchInfo dispatchInfo);\n\n    String getName();\n\n    default String getIcon() { return null; }\n\n    default String getSchema() { return null; }\n}\n"})}),"\n",(0,i.jsx)(t.p,{children:"TaskExtension is the extension interface of plugins, which inherits PF4J's ExtensionPoint Interface\uff1a"}),"\n",(0,i.jsx)(t.h4,{id:"getname",children:"getName()"}),"\n",(0,i.jsx)(t.p,{children:"The getName() method returns the name of the plugin, which will also define the resource protocol name that the plugin fits in, that is, the resourceProtocol's field in the task configuration.Rill Flow will select an executor for the task by matching the resource Protocol's name with the task executor."}),"\n",(0,i.jsx)(t.h4,{id:"handle",children:"handle()"}),"\n",(0,i.jsx)(t.p,{children:"The handle() method, the task process, is the core of the task processing extension plugin, and when the task properly matched with the executor is distributed by the Rill Flow, will call the handle() method of the executor to complete the task."}),"\n",(0,i.jsx)(t.p,{children:"handle() method contains two parameters:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Resource\uff1aResource type, with resourceName, schemeProtocoland schemeValue fields to pass the resourceName configured and parsed structure to the executor for use."}),"\n",(0,i.jsxs)(t.li,{children:["DispatchInfo: DispatchInfo, with the following fields:","\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"ExecutionId: Execution ID for this workflow"}),"\n",(0,i.jsx)(t.li,{children:"TaskInfo: TaskInfo type, contains details of the current task including task name, task status, task definition information, etc. See the code annotation and plugin example code of that type."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(t.h4,{id:"geticon",children:"getIcon()"}),"\n",(0,i.jsx)(t.p,{children:"The display icon used to provide tasks to the admin background. The default implementation returns empty will be displayed using the default icon."}),"\n",(0,i.jsx)(t.p,{children:"If you want to customize the display icon, implement this method and return the base 64 encoding string for icon."}),"\n",(0,i.jsx)(t.h4,{id:"getschema",children:"getSchema()"}),"\n",(0,i.jsxs)(t.p,{children:["Form format that needs to be displayed and completed when providing tasks for the admin page to define the protocol. See: ",(0,i.jsx)(t.a,{href:"https://json-schema.org/",children:"json-schema"})]}),"\n",(0,i.jsx)(t.p,{children:"When creating the tasks of the protocol, the admin page resolves the schema string returned by the plugin, displays the schema defined form after the required parameters, and places the user's information in the task-defined parameters fields of yaml. In the handle() method, you can get the user-filled parameter by dispatchInfo.getTask().getParameters()."})]})}function d(e={}){const{wrapper:t}={...(0,o.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>a,a:()=>r});var i=n(7294);const o={},s=i.createContext(o);function r(e){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),i.createElement(s.Provider,{value:t},e.children)}}}]);